#include <iostream>
using namespace std;

void main()
{
	// 파일 입출력
	// - 콘솔은 입출력 스트림을 자동으로 만들어주지만 파일을 대상으로 할땐 생성되지 않음.


	// ##################################################################################
	// 파일 출력
	// fopen_s(파일 스트림의 주소, 경로/파일명, 입출력모드);       리턴값으로 errno_t 성공시 0, 실패시 0이 아닌값
	// - 파일 개방 함수, 입출력에 필요한 입출력 스트림 생성
	FILE* fp = nullptr;
	errno_t err = fopen_s(&fp, "C:/Users/User/OneDrive/C++/C++/test.txt", "a");
	if (!err)
	{	// 파일에 문자열 적는 함수. (파일에 출력)
		fputs("ㅎㅇ", fp);
	}

	// 입출력모드
	// - r(read)   : 읽어오기 	(파일이 없으면 에러발생)
	// - w(write)  : 덮어쓰기 출력(파일이 없으면 만들어줌)
	// - a(append) : 이어쓰기 출력(파일이 없으면 만들어줌)

	// 추가 입출력모드
	// - 입출력모드 + 추가 입출력 모드로 사용.(생략시 text 모드)   ex) "rt", "rb", "wt", "wb"
	// - t(text)   : 사람이 보는 문자형태로 입출력(바이너리에서 다시 텍스트로 재전환되는 형식)	
	// - b(binary) : 문자형태로 표현할 수 없는 데이터 입출력(이미지, 동영상, 음악 등)


	// fclose(파일 스트림)
	// - 동적할당처럼 사용하지 않는 파일은 종료해줘야함.
	fclose(fp);


	// 절대 경로
	// - 경로 풀네임
	// - 폴더 위치가 바뀌면 수정해야된다)
	// ex) "C:/Users/User/OneDrive/C++/C++/test.txt"

	// 상대 경로
	// - c++들어있는 폴더 기준 또는 실행파일이 들어있는 기준으로 단축 경로
	// - 폴더 위치가 변경되도 그대로 작동함.
	// - ".." 상위 경로를 의미
	// ex) "../C++/test.txt"




	// ##################################################################################
	// 파일 입력
	FILE* fp2 = nullptr;
	char szName[32];
	errno_t err2 = fopen_s(&fp2, "C:/Users/User/OneDrive/C++/C++/test.txt", "r");
	if (!err)
	{	// 파일을 읽어옴 (파일에서 입력)
		// fgets(받아올 문자열, 문자열 크기, 파일스트림);
		// - 개행(enter)문자까지 읽어 옴
		// - 문자열 크기 -1 만큼 불러옴 ('/0'을 고려해서 -1개만큼 불러옴, '\0' 저장 안되있음)
		fgets(szName, 32, fp);


		// char ch = fgetc(fp);				// 문자 1개만 입력;
		// putchar(ch);						// 문자 1개만 출력(모니터에출력, 파일아님);
	}

	// EOF
	// - 파일 끝을 알아낼때 사용
	// ex)
	// if(EOF == ch)	// ch는 파일 한글자씩 읽는 문자 변수




	// ##################################################################################
	// stdin과 stdout
	// stdin : 표준 입력 스트림	// 키보드로 부터 입력받음
	// stdout: 표준 출력 스트림	// 모니터로 부터 출력을함
	fputs("Hellow", stdout);



	// 바이너리 모드 출력
	// fwrite(데이터를 받을 배열(주소), 배열자료형 크기, 배열자료형 요소 갯수, 파일 스트림);
	// - 바이너리 형태로 파일에 저장할때 사용


	// 바이너리 모드 입력
	// freed(데이터를 받을 배열(주소), 배열자료형 크기, 배열자료형 요소 갯수, 파일 스트림);
	// - 바이너리 형태로 파일에서 불러옴
}